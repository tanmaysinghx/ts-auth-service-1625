name: CICD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout source code
      - name: Checkout source
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Step 3: Cache Node.js modules
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      # Step 4: Install dependencies and build the project
      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      # Step 5: Login to Docker Hub
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step 6: Build Docker image
      - name: Build Docker image
        run: docker build -t tanmaysinghx/ts-auth-service-1625:latest .

      # Step 7: Publish Docker image to Docker Hub
      - name: Push Docker image
        run: docker push tanmaysinghx/ts-auth-service-1625:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensure this job runs after the build job
    steps:
      # Step 1: Checkout source code (optional)
      - name: Checkout source
        uses: actions/checkout@v3

      # Step 2: Set up SSH Key and Configure SSH for the Runner
      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh  # Ensure .ssh directory exists
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Step 3: Add Droplet IP to known hosts (to avoid Host key verification error)
      - name: Add Droplet to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts

      # Step 4: SSH into Droplet and Pull Latest Docker Image
      - name: Pull Latest Docker Image
        run: |
          ssh -i ~/.ssh/id_rsa root@${{ secrets.DROPLET_IP }} \
          'docker pull tanmaysinghx/ts-auth-service-1625:latest'

      # Step 5: Restart Docker Container on Droplet
      - name: Restart Docker Container
        run: |
          ssh -i ~/.ssh/id_rsa root@${{ secrets.DROPLET_IP }} \
          'docker rm -f ts-auth-service-1625 || true && \
           docker run -d -p 8080:8080 --name ts-auth-service-1625 tanmaysinghx/ts-auth-service-1625:latest'
